// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flstorage/fedstoraging/v1/data_access_permission.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DataAccessPermission defines the DataAccessPermission message.
type DataAccessPermission struct {
	PermissionId string `protobuf:"bytes,1,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
	Granted      bool   `protobuf:"varint,2,opt,name=granted,proto3" json:"granted,omitempty"`
}

func (m *DataAccessPermission) Reset()         { *m = DataAccessPermission{} }
func (m *DataAccessPermission) String() string { return proto.CompactTextString(m) }
func (*DataAccessPermission) ProtoMessage()    {}
func (*DataAccessPermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9b93b0d6d0e34fb, []int{0}
}
func (m *DataAccessPermission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataAccessPermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataAccessPermission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataAccessPermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataAccessPermission.Merge(m, src)
}
func (m *DataAccessPermission) XXX_Size() int {
	return m.Size()
}
func (m *DataAccessPermission) XXX_DiscardUnknown() {
	xxx_messageInfo_DataAccessPermission.DiscardUnknown(m)
}

var xxx_messageInfo_DataAccessPermission proto.InternalMessageInfo

func (m *DataAccessPermission) GetPermissionId() string {
	if m != nil {
		return m.PermissionId
	}
	return ""
}

func (m *DataAccessPermission) GetGranted() bool {
	if m != nil {
		return m.Granted
	}
	return false
}

func init() {
	proto.RegisterType((*DataAccessPermission)(nil), "flstorage.fedstoraging.v1.DataAccessPermission")
}

func init() {
	proto.RegisterFile("flstorage/fedstoraging/v1/data_access_permission.proto", fileDescriptor_a9b93b0d6d0e34fb)
}

var fileDescriptor_a9b93b0d6d0e34fb = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4b, 0xcb, 0x29, 0x2e,
	0xc9, 0x2f, 0x4a, 0x4c, 0x4f, 0xd5, 0x4f, 0x4b, 0x4d, 0x81, 0x30, 0x33, 0xf3, 0xd2, 0xf5, 0xcb,
	0x0c, 0xf5, 0x53, 0x12, 0x4b, 0x12, 0xe3, 0x13, 0x93, 0x93, 0x53, 0x8b, 0x8b, 0xe3, 0x0b, 0x52,
	0x8b, 0x72, 0x33, 0x8b, 0x8b, 0x33, 0xf3, 0xf3, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x24,
	0xe1, 0xfa, 0xf4, 0x90, 0xf5, 0xe9, 0x95, 0x19, 0x2a, 0x85, 0x72, 0x89, 0xb8, 0x24, 0x96, 0x24,
	0x3a, 0x82, 0x75, 0x06, 0xc0, 0x35, 0x0a, 0x29, 0x73, 0xf1, 0x22, 0x8c, 0x89, 0xcf, 0x4c, 0x91,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x41, 0x08, 0x7a, 0xa6, 0x08, 0x49, 0x70, 0xb1, 0xa7,
	0x17, 0x25, 0xe6, 0x95, 0xa4, 0xa6, 0x48, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x04, 0xc1, 0xb8, 0x4e,
	0x16, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7,
	0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x25, 0x87, 0xf0, 0x43, 0x05,
	0xaa, 0x2f, 0x4a, 0x2a, 0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0x4e, 0x36, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x5b, 0x47, 0xdf, 0xb1, 0xec, 0x00, 0x00, 0x00,
}

func (m *DataAccessPermission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataAccessPermission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataAccessPermission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Granted {
		i--
		if m.Granted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.PermissionId) > 0 {
		i -= len(m.PermissionId)
		copy(dAtA[i:], m.PermissionId)
		i = encodeVarintDataAccessPermission(dAtA, i, uint64(len(m.PermissionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDataAccessPermission(dAtA []byte, offset int, v uint64) int {
	offset -= sovDataAccessPermission(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DataAccessPermission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PermissionId)
	if l > 0 {
		n += 1 + l + sovDataAccessPermission(uint64(l))
	}
	if m.Granted {
		n += 2
	}
	return n
}

func sovDataAccessPermission(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDataAccessPermission(x uint64) (n int) {
	return sovDataAccessPermission(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataAccessPermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataAccessPermission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataAccessPermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataAccessPermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataAccessPermission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataAccessPermission
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataAccessPermission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermissionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Granted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataAccessPermission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Granted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDataAccessPermission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataAccessPermission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataAccessPermission(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataAccessPermission
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataAccessPermission
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataAccessPermission
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDataAccessPermission
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDataAccessPermission
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDataAccessPermission
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDataAccessPermission        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataAccessPermission          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDataAccessPermission = fmt.Errorf("proto: unexpected end of group")
)
