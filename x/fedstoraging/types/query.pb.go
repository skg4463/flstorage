// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flstorage/fedstoraging/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc3ef5120b9cbe82, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc3ef5120b9cbe82, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetStoredFileRequest defines the QueryGetStoredFileRequest message.
type QueryGetStoredFileRequest struct {
	OriginalHash string `protobuf:"bytes,1,opt,name=original_hash,json=originalHash,proto3" json:"original_hash,omitempty"`
}

func (m *QueryGetStoredFileRequest) Reset()         { *m = QueryGetStoredFileRequest{} }
func (m *QueryGetStoredFileRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredFileRequest) ProtoMessage()    {}
func (*QueryGetStoredFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc3ef5120b9cbe82, []int{2}
}
func (m *QueryGetStoredFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStoredFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStoredFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredFileRequest.Merge(m, src)
}
func (m *QueryGetStoredFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStoredFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredFileRequest proto.InternalMessageInfo

func (m *QueryGetStoredFileRequest) GetOriginalHash() string {
	if m != nil {
		return m.OriginalHash
	}
	return ""
}

// QueryGetStoredFileResponse defines the QueryGetStoredFileResponse message.
type QueryGetStoredFileResponse struct {
	StoredFile StoredFile `protobuf:"bytes,1,opt,name=stored_file,json=storedFile,proto3" json:"stored_file"`
}

func (m *QueryGetStoredFileResponse) Reset()         { *m = QueryGetStoredFileResponse{} }
func (m *QueryGetStoredFileResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredFileResponse) ProtoMessage()    {}
func (*QueryGetStoredFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc3ef5120b9cbe82, []int{3}
}
func (m *QueryGetStoredFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStoredFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStoredFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredFileResponse.Merge(m, src)
}
func (m *QueryGetStoredFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStoredFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredFileResponse proto.InternalMessageInfo

func (m *QueryGetStoredFileResponse) GetStoredFile() StoredFile {
	if m != nil {
		return m.StoredFile
	}
	return StoredFile{}
}

// QueryAllStoredFileRequest defines the QueryAllStoredFileRequest message.
type QueryAllStoredFileRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredFileRequest) Reset()         { *m = QueryAllStoredFileRequest{} }
func (m *QueryAllStoredFileRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredFileRequest) ProtoMessage()    {}
func (*QueryAllStoredFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc3ef5120b9cbe82, []int{4}
}
func (m *QueryAllStoredFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoredFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoredFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredFileRequest.Merge(m, src)
}
func (m *QueryAllStoredFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoredFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredFileRequest proto.InternalMessageInfo

func (m *QueryAllStoredFileRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllStoredFileResponse defines the QueryAllStoredFileResponse message.
type QueryAllStoredFileResponse struct {
	StoredFile []StoredFile        `protobuf:"bytes,1,rep,name=stored_file,json=storedFile,proto3" json:"stored_file"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredFileResponse) Reset()         { *m = QueryAllStoredFileResponse{} }
func (m *QueryAllStoredFileResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredFileResponse) ProtoMessage()    {}
func (*QueryAllStoredFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc3ef5120b9cbe82, []int{5}
}
func (m *QueryAllStoredFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoredFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoredFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredFileResponse.Merge(m, src)
}
func (m *QueryAllStoredFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoredFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredFileResponse proto.InternalMessageInfo

func (m *QueryAllStoredFileResponse) GetStoredFile() []StoredFile {
	if m != nil {
		return m.StoredFile
	}
	return nil
}

func (m *QueryAllStoredFileResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetDataAccessPermissionRequest defines the QueryGetDataAccessPermissionRequest message.
type QueryGetDataAccessPermissionRequest struct {
	PermissionId string `protobuf:"bytes,1,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
}

func (m *QueryGetDataAccessPermissionRequest) Reset()         { *m = QueryGetDataAccessPermissionRequest{} }
func (m *QueryGetDataAccessPermissionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDataAccessPermissionRequest) ProtoMessage()    {}
func (*QueryGetDataAccessPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc3ef5120b9cbe82, []int{6}
}
func (m *QueryGetDataAccessPermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDataAccessPermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDataAccessPermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDataAccessPermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDataAccessPermissionRequest.Merge(m, src)
}
func (m *QueryGetDataAccessPermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDataAccessPermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDataAccessPermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDataAccessPermissionRequest proto.InternalMessageInfo

func (m *QueryGetDataAccessPermissionRequest) GetPermissionId() string {
	if m != nil {
		return m.PermissionId
	}
	return ""
}

// QueryGetDataAccessPermissionResponse defines the QueryGetDataAccessPermissionResponse message.
type QueryGetDataAccessPermissionResponse struct {
	DataAccessPermission DataAccessPermission `protobuf:"bytes,1,opt,name=data_access_permission,json=dataAccessPermission,proto3" json:"data_access_permission"`
}

func (m *QueryGetDataAccessPermissionResponse) Reset()         { *m = QueryGetDataAccessPermissionResponse{} }
func (m *QueryGetDataAccessPermissionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDataAccessPermissionResponse) ProtoMessage()    {}
func (*QueryGetDataAccessPermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc3ef5120b9cbe82, []int{7}
}
func (m *QueryGetDataAccessPermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDataAccessPermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDataAccessPermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDataAccessPermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDataAccessPermissionResponse.Merge(m, src)
}
func (m *QueryGetDataAccessPermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDataAccessPermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDataAccessPermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDataAccessPermissionResponse proto.InternalMessageInfo

func (m *QueryGetDataAccessPermissionResponse) GetDataAccessPermission() DataAccessPermission {
	if m != nil {
		return m.DataAccessPermission
	}
	return DataAccessPermission{}
}

// QueryAllDataAccessPermissionRequest defines the QueryAllDataAccessPermissionRequest message.
type QueryAllDataAccessPermissionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDataAccessPermissionRequest) Reset()         { *m = QueryAllDataAccessPermissionRequest{} }
func (m *QueryAllDataAccessPermissionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDataAccessPermissionRequest) ProtoMessage()    {}
func (*QueryAllDataAccessPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc3ef5120b9cbe82, []int{8}
}
func (m *QueryAllDataAccessPermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDataAccessPermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDataAccessPermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDataAccessPermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDataAccessPermissionRequest.Merge(m, src)
}
func (m *QueryAllDataAccessPermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDataAccessPermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDataAccessPermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDataAccessPermissionRequest proto.InternalMessageInfo

func (m *QueryAllDataAccessPermissionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllDataAccessPermissionResponse defines the QueryAllDataAccessPermissionResponse message.
type QueryAllDataAccessPermissionResponse struct {
	DataAccessPermission []DataAccessPermission `protobuf:"bytes,1,rep,name=data_access_permission,json=dataAccessPermission,proto3" json:"data_access_permission"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDataAccessPermissionResponse) Reset()         { *m = QueryAllDataAccessPermissionResponse{} }
func (m *QueryAllDataAccessPermissionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDataAccessPermissionResponse) ProtoMessage()    {}
func (*QueryAllDataAccessPermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc3ef5120b9cbe82, []int{9}
}
func (m *QueryAllDataAccessPermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDataAccessPermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDataAccessPermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDataAccessPermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDataAccessPermissionResponse.Merge(m, src)
}
func (m *QueryAllDataAccessPermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDataAccessPermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDataAccessPermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDataAccessPermissionResponse proto.InternalMessageInfo

func (m *QueryAllDataAccessPermissionResponse) GetDataAccessPermission() []DataAccessPermission {
	if m != nil {
		return m.DataAccessPermission
	}
	return nil
}

func (m *QueryAllDataAccessPermissionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "flstorage.fedstoraging.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "flstorage.fedstoraging.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGetStoredFileRequest)(nil), "flstorage.fedstoraging.v1.QueryGetStoredFileRequest")
	proto.RegisterType((*QueryGetStoredFileResponse)(nil), "flstorage.fedstoraging.v1.QueryGetStoredFileResponse")
	proto.RegisterType((*QueryAllStoredFileRequest)(nil), "flstorage.fedstoraging.v1.QueryAllStoredFileRequest")
	proto.RegisterType((*QueryAllStoredFileResponse)(nil), "flstorage.fedstoraging.v1.QueryAllStoredFileResponse")
	proto.RegisterType((*QueryGetDataAccessPermissionRequest)(nil), "flstorage.fedstoraging.v1.QueryGetDataAccessPermissionRequest")
	proto.RegisterType((*QueryGetDataAccessPermissionResponse)(nil), "flstorage.fedstoraging.v1.QueryGetDataAccessPermissionResponse")
	proto.RegisterType((*QueryAllDataAccessPermissionRequest)(nil), "flstorage.fedstoraging.v1.QueryAllDataAccessPermissionRequest")
	proto.RegisterType((*QueryAllDataAccessPermissionResponse)(nil), "flstorage.fedstoraging.v1.QueryAllDataAccessPermissionResponse")
}

func init() {
	proto.RegisterFile("flstorage/fedstoraging/v1/query.proto", fileDescriptor_dc3ef5120b9cbe82)
}

var fileDescriptor_dc3ef5120b9cbe82 = []byte{
	// 700 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xee, 0xc0, 0xef, 0x87, 0x61, 0x10, 0x13, 0x47, 0xa2, 0xb0, 0x31, 0xab, 0x2c, 0x82, 0x88,
	0x71, 0x27, 0x05, 0x25, 0x78, 0x41, 0x8b, 0x04, 0xc4, 0x70, 0xc0, 0x7a, 0xd3, 0x43, 0x33, 0x74,
	0x87, 0x65, 0x75, 0xbb, 0xb3, 0xec, 0x2c, 0x44, 0x42, 0xb8, 0xf8, 0x09, 0x8c, 0x7c, 0x09, 0x2f,
	0x26, 0x26, 0x5e, 0xfd, 0x00, 0x1c, 0x3c, 0x90, 0x98, 0x18, 0x0f, 0xc6, 0x18, 0xaa, 0xf1, 0x6b,
	0x98, 0x9d, 0x9d, 0x76, 0xbb, 0xb2, 0x7f, 0x5a, 0xec, 0x85, 0x0c, 0x6f, 0xdf, 0x3f, 0xcf, 0xf3,
	0xcc, 0x3b, 0x4f, 0x0b, 0xc7, 0x37, 0x6c, 0xee, 0x33, 0x8f, 0x98, 0x14, 0x6f, 0x50, 0x23, 0x3c,
	0x5a, 0x8e, 0x89, 0x77, 0x8a, 0x78, 0x6b, 0x9b, 0x7a, 0xbb, 0xba, 0xeb, 0x31, 0x9f, 0xa1, 0x91,
	0x66, 0x9a, 0xde, 0x9a, 0xa6, 0xef, 0x14, 0x95, 0xf3, 0xa4, 0x66, 0x39, 0x0c, 0x8b, 0xbf, 0x61,
	0xb6, 0x32, 0x55, 0x65, 0xbc, 0xc6, 0x38, 0x5e, 0x27, 0x9c, 0x86, 0x6d, 0xf0, 0x4e, 0x71, 0x9d,
	0xfa, 0xa4, 0x88, 0xdd, 0xa0, 0x8e, 0xf8, 0x16, 0x73, 0x64, 0xee, 0x6c, 0x3a, 0x00, 0x83, 0xf8,
	0xa4, 0x42, 0xaa, 0x55, 0xca, 0x79, 0xc5, 0xa5, 0x5e, 0xcd, 0xe2, 0x3c, 0xaa, 0x9b, 0x48, 0xaf,
	0x73, 0x89, 0x47, 0x6a, 0x5c, 0xe6, 0xdd, 0x4c, 0xcf, 0x0b, 0xfe, 0xa1, 0x46, 0x65, 0xc3, 0xb2,
	0xa9, 0x4c, 0x1e, 0x32, 0x99, 0xc9, 0xc4, 0x11, 0x07, 0x27, 0x19, 0xbd, 0x6c, 0x32, 0x66, 0xda,
	0x14, 0x13, 0xd7, 0xc2, 0xc4, 0x71, 0x98, 0x2f, 0xf0, 0xcb, 0x01, 0xda, 0x10, 0x44, 0x8f, 0x03,
	0x8a, 0x6b, 0x62, 0x6a, 0x99, 0x6e, 0x6d, 0x53, 0xee, 0x6b, 0xcf, 0xe0, 0x85, 0x58, 0x94, 0xbb,
	0xcc, 0xe1, 0x14, 0x2d, 0xc2, 0xbe, 0x10, 0xdd, 0x30, 0xb8, 0x0a, 0x26, 0x07, 0xa6, 0x47, 0xf5,
	0x54, 0x61, 0xf5, 0xb0, 0x74, 0xa1, 0xff, 0xf0, 0xfb, 0x95, 0xc2, 0xdb, 0xdf, 0xef, 0xa7, 0x40,
	0x59, 0xd6, 0x6a, 0xf7, 0xe1, 0x88, 0x68, 0xbe, 0x4c, 0xfd, 0x27, 0x82, 0xc3, 0x92, 0x65, 0x53,
	0x39, 0x19, 0x8d, 0xc1, 0x41, 0xe6, 0x59, 0x81, 0xca, 0x76, 0x65, 0x93, 0xf0, 0x4d, 0x31, 0xa9,
	0xbf, 0x7c, 0xb6, 0x11, 0x7c, 0x48, 0xf8, 0xa6, 0xf6, 0x1c, 0x2a, 0x49, 0x1d, 0x24, 0xca, 0x55,
	0x38, 0xd0, 0xa2, 0x8d, 0x84, 0x3a, 0x9e, 0x01, 0x35, 0xea, 0xb1, 0xf0, 0x5f, 0x00, 0xb7, 0x0c,
	0x79, 0x33, 0xa2, 0x55, 0x25, 0xda, 0x92, 0x6d, 0x9f, 0x44, 0xbb, 0x04, 0x61, 0xb4, 0x12, 0x72,
	0xd2, 0x84, 0x1e, 0xee, 0x8f, 0x1e, 0xec, 0x8f, 0x1e, 0xae, 0xa1, 0xdc, 0x1f, 0x7d, 0x8d, 0x98,
	0x8d, 0xda, 0x72, 0x4b, 0xa5, 0xf6, 0x01, 0x48, 0x46, 0x7f, 0x4d, 0x49, 0x63, 0xd4, 0xfb, 0x0f,
	0x8c, 0xd0, 0x72, 0x0c, 0x74, 0x8f, 0x00, 0x7d, 0x3d, 0x17, 0x74, 0x08, 0x25, 0x86, 0xfa, 0x11,
	0x1c, 0x6b, 0x5c, 0xc3, 0x22, 0xf1, 0x49, 0x49, 0xec, 0xfa, 0x5a, 0x73, 0xd5, 0x5b, 0xae, 0x34,
	0xda, 0xff, 0x8a, 0x65, 0x34, 0xae, 0x34, 0x0a, 0xae, 0x18, 0xda, 0x01, 0x80, 0xd7, 0xb2, 0x9b,
	0x49, 0x2d, 0x5e, 0xc0, 0x8b, 0xc9, 0x2f, 0x4b, 0xca, 0x8f, 0x33, 0x64, 0x49, 0x6a, 0x2c, 0x05,
	0x1a, 0x32, 0x12, 0x3e, 0xd3, 0x6a, 0x92, 0x61, 0xc9, 0xb6, 0xb3, 0x18, 0x76, 0x6b, 0x0d, 0xbe,
	0x35, 0x44, 0x48, 0x9d, 0xd7, 0x86, 0x08, 0xbd, 0x5d, 0x16, 0xa1, 0x6b, 0xfb, 0x32, 0xfd, 0xe9,
	0x0c, 0xfc, 0x5f, 0xd0, 0x43, 0x6f, 0x00, 0xec, 0x0b, 0x0d, 0x02, 0xdd, 0xca, 0x80, 0x7a, 0xd2,
	0x99, 0x14, 0xbd, 0xdd, 0xf4, 0x70, 0xbe, 0x76, 0xe3, 0xd5, 0xe7, 0x9f, 0x07, 0x3d, 0x63, 0x68,
	0x14, 0xe7, 0x39, 0x2e, 0xfa, 0x08, 0xe0, 0x60, 0xcc, 0x51, 0xd0, 0xed, 0xbc, 0x61, 0x49, 0x16,
	0xa6, 0xdc, 0xe9, 0xb0, 0x4a, 0x22, 0x9d, 0x17, 0x48, 0xe7, 0xd0, 0x2c, 0x6e, 0xcb, 0xf3, 0xf1,
	0x5e, 0xcc, 0x27, 0xf7, 0xd1, 0x3b, 0x00, 0xcf, 0xad, 0x5a, 0xbc, 0x23, 0xfc, 0x49, 0xa6, 0x96,
	0x8f, 0x3f, 0xd1, 0xa4, 0x34, 0x5d, 0xe0, 0x9f, 0x44, 0x13, 0xed, 0xe1, 0x47, 0xbf, 0x00, 0xbc,
	0x94, 0xf2, 0xd8, 0xd1, 0x7c, 0x1b, 0x12, 0x66, 0x3c, 0x48, 0xe5, 0xde, 0xa9, 0xeb, 0x25, 0x99,
	0x15, 0x41, 0xe6, 0x01, 0x2a, 0xe1, 0x4e, 0xbf, 0xe0, 0xf1, 0x5e, 0xcc, 0xec, 0xf6, 0xd1, 0x17,
	0x00, 0x87, 0x83, 0x7b, 0x39, 0x1d, 0xd1, 0x6c, 0xe7, 0xc9, 0x27, 0x9a, 0xe3, 0x24, 0xda, 0x5d,
	0x41, 0x74, 0x06, 0x15, 0x3b, 0x26, 0xba, 0x30, 0x77, 0x78, 0xac, 0x82, 0xa3, 0x63, 0x15, 0xfc,
	0x38, 0x56, 0xc1, 0xeb, 0xba, 0x5a, 0x38, 0xaa, 0xab, 0x85, 0xaf, 0x75, 0xb5, 0xf0, 0x54, 0x8d,
	0x7a, 0xbd, 0x8c, 0x77, 0xf3, 0x77, 0x5d, 0xca, 0xd7, 0xfb, 0xc4, 0x6f, 0x8f, 0x99, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x37, 0x7c, 0xeb, 0x60, 0xbf, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ListStoredFile Queries a list of StoredFile items.
	GetStoredFile(ctx context.Context, in *QueryGetStoredFileRequest, opts ...grpc.CallOption) (*QueryGetStoredFileResponse, error)
	// ListStoredFile defines the ListStoredFile RPC.
	ListStoredFile(ctx context.Context, in *QueryAllStoredFileRequest, opts ...grpc.CallOption) (*QueryAllStoredFileResponse, error)
	// ListDataAccessPermission Queries a list of DataAccessPermission items.
	GetDataAccessPermission(ctx context.Context, in *QueryGetDataAccessPermissionRequest, opts ...grpc.CallOption) (*QueryGetDataAccessPermissionResponse, error)
	// ListDataAccessPermission defines the ListDataAccessPermission RPC.
	ListDataAccessPermission(ctx context.Context, in *QueryAllDataAccessPermissionRequest, opts ...grpc.CallOption) (*QueryAllDataAccessPermissionResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/flstorage.fedstoraging.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStoredFile(ctx context.Context, in *QueryGetStoredFileRequest, opts ...grpc.CallOption) (*QueryGetStoredFileResponse, error) {
	out := new(QueryGetStoredFileResponse)
	err := c.cc.Invoke(ctx, "/flstorage.fedstoraging.v1.Query/GetStoredFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListStoredFile(ctx context.Context, in *QueryAllStoredFileRequest, opts ...grpc.CallOption) (*QueryAllStoredFileResponse, error) {
	out := new(QueryAllStoredFileResponse)
	err := c.cc.Invoke(ctx, "/flstorage.fedstoraging.v1.Query/ListStoredFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDataAccessPermission(ctx context.Context, in *QueryGetDataAccessPermissionRequest, opts ...grpc.CallOption) (*QueryGetDataAccessPermissionResponse, error) {
	out := new(QueryGetDataAccessPermissionResponse)
	err := c.cc.Invoke(ctx, "/flstorage.fedstoraging.v1.Query/GetDataAccessPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListDataAccessPermission(ctx context.Context, in *QueryAllDataAccessPermissionRequest, opts ...grpc.CallOption) (*QueryAllDataAccessPermissionResponse, error) {
	out := new(QueryAllDataAccessPermissionResponse)
	err := c.cc.Invoke(ctx, "/flstorage.fedstoraging.v1.Query/ListDataAccessPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ListStoredFile Queries a list of StoredFile items.
	GetStoredFile(context.Context, *QueryGetStoredFileRequest) (*QueryGetStoredFileResponse, error)
	// ListStoredFile defines the ListStoredFile RPC.
	ListStoredFile(context.Context, *QueryAllStoredFileRequest) (*QueryAllStoredFileResponse, error)
	// ListDataAccessPermission Queries a list of DataAccessPermission items.
	GetDataAccessPermission(context.Context, *QueryGetDataAccessPermissionRequest) (*QueryGetDataAccessPermissionResponse, error)
	// ListDataAccessPermission defines the ListDataAccessPermission RPC.
	ListDataAccessPermission(context.Context, *QueryAllDataAccessPermissionRequest) (*QueryAllDataAccessPermissionResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetStoredFile(ctx context.Context, req *QueryGetStoredFileRequest) (*QueryGetStoredFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoredFile not implemented")
}
func (*UnimplementedQueryServer) ListStoredFile(ctx context.Context, req *QueryAllStoredFileRequest) (*QueryAllStoredFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStoredFile not implemented")
}
func (*UnimplementedQueryServer) GetDataAccessPermission(ctx context.Context, req *QueryGetDataAccessPermissionRequest) (*QueryGetDataAccessPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataAccessPermission not implemented")
}
func (*UnimplementedQueryServer) ListDataAccessPermission(ctx context.Context, req *QueryAllDataAccessPermissionRequest) (*QueryAllDataAccessPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataAccessPermission not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flstorage.fedstoraging.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStoredFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStoredFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStoredFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flstorage.fedstoraging.v1.Query/GetStoredFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStoredFile(ctx, req.(*QueryGetStoredFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListStoredFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStoredFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListStoredFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flstorage.fedstoraging.v1.Query/ListStoredFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListStoredFile(ctx, req.(*QueryAllStoredFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDataAccessPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDataAccessPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDataAccessPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flstorage.fedstoraging.v1.Query/GetDataAccessPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDataAccessPermission(ctx, req.(*QueryGetDataAccessPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListDataAccessPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDataAccessPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListDataAccessPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flstorage.fedstoraging.v1.Query/ListDataAccessPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListDataAccessPermission(ctx, req.(*QueryAllDataAccessPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flstorage.fedstoraging.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetStoredFile",
			Handler:    _Query_GetStoredFile_Handler,
		},
		{
			MethodName: "ListStoredFile",
			Handler:    _Query_ListStoredFile_Handler,
		},
		{
			MethodName: "GetDataAccessPermission",
			Handler:    _Query_GetDataAccessPermission_Handler,
		},
		{
			MethodName: "ListDataAccessPermission",
			Handler:    _Query_ListDataAccessPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flstorage/fedstoraging/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OriginalHash) > 0 {
		i -= len(m.OriginalHash)
		copy(dAtA[i:], m.OriginalHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OriginalHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StoredFile.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoredFile) > 0 {
		for iNdEx := len(m.StoredFile) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StoredFile[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDataAccessPermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDataAccessPermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDataAccessPermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PermissionId) > 0 {
		i -= len(m.PermissionId)
		copy(dAtA[i:], m.PermissionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PermissionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDataAccessPermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDataAccessPermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDataAccessPermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DataAccessPermission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDataAccessPermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDataAccessPermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDataAccessPermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDataAccessPermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDataAccessPermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDataAccessPermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DataAccessPermission) > 0 {
		for iNdEx := len(m.DataAccessPermission) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataAccessPermission[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetStoredFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OriginalHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStoredFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoredFile.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStoredFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStoredFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StoredFile) > 0 {
		for _, e := range m.StoredFile {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDataAccessPermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PermissionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDataAccessPermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DataAccessPermission.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDataAccessPermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDataAccessPermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DataAccessPermission) > 0 {
		for _, e := range m.DataAccessPermission {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStoredFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStoredFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoredFile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoredFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoredFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoredFile = append(m.StoredFile, StoredFile{})
			if err := m.StoredFile[len(m.StoredFile)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDataAccessPermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDataAccessPermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDataAccessPermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermissionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDataAccessPermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDataAccessPermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDataAccessPermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataAccessPermission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DataAccessPermission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDataAccessPermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDataAccessPermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDataAccessPermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDataAccessPermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDataAccessPermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDataAccessPermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataAccessPermission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataAccessPermission = append(m.DataAccessPermission, DataAccessPermission{})
			if err := m.DataAccessPermission[len(m.DataAccessPermission)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
